/*  
▼ Attention
 - Predictable (予測性)

 - Resusable (再利用性)

 - Sercurable (保守性)

 - Extendable (拡張性)

 - ID is only for JavaScript fooks (CLASS is the alternative)

 - Priority : !important > class > element > *

 - NO emittion (e.g. ○ button -> btn)
 - OK emittion (e.g. information -> info) * long and easy-to-know words

 - Based on meaning but not look/location (× text-red  ○ text-attention)

 - Apply only necessary styles to element selector (body, a, img)

 - Don't depend on html (× .content > div > div)

 - Don't complicate stylings (× li.item  ○ .item)


▼ CSS structure
 - SMACSS (Scalable and Modular Architecture)
   - Base : default/reset css (body, a, img)
   - Layout : header, footer (l-)
   - Module: reusable components (.button, .title)
   - State : fooks for js (is-open) 
   - Theme : theme swicher (.theme-dark)

 - BEMCSS (Block Element Modifier)
   - Block__Element–-Modifier (up to preference)
      -> block-element--modifier
      -> _ for long naming (* block_name)
   - (e.g.) header-nav__item--contact
   - contact(modifer) is set to make itself outstanding

Sassを使用している場合は以下のルール
   ローカル変数を最初に定義します
   @extendをローカル変数の次に指定します
   @mixinを@extendの次に指定します
   @contentを使用している@mixinは最後に指定します
   .baz {
   $padding: 1em;
   @extend %base-unit;
   @include clearfix;
   display: block;
   margin-right: auto;
   margin-left: auto;
   padding-right: $padding;
   padding-left: $padding;
   @include media-query(md) {
      padding-right: ($padding * 2);
      padding-left: ($padding * 2);
   }
}

▼ プロパティ宣言順
mixin
ボックスモデルの種類や表示方法を示すプロパティ（box-sizing, display, visibility, floatなど）
位置情報に関するプロパティ（position, z-indexなど）
ボックスモデルのサイズに関するプロパティ（width, height, margin, padding, borderなど）
フォント関連のプロパティ（font-size, line-heightなど）
色に関するプロパティ（color, background-colorなど）
それ以外
@contentを使用している@mixin
*/

/*-------------------------------------------------------------------
|  Foundation                                                       |
-------------------------------------------------------------------*/

@use "foundation/vendors" with (
   // bootstrap内の変数の上書き
   $grid-breakpoints: (
      sp:    480px,
      tab:   768px,
      pc:    1024px
   )
);
@use "foundation/reset";
@use "foundation/base";

/*-------------------------------------------------------------------
|  Layout                                                           |
|  ワイヤーフレームに定義されるような大きなコンテナブロック(IDセレクタ指定可)   |
-------------------------------------------------------------------*/

@use "layout/header";
@use "layout/main";
@use "layout/footer";

/*-------------------------------------------------------------------
|  Object                                                           |
-------------------------------------------------------------------*/

/*  Component  -----------------------------------------*/
// Component 再利用できるような小さなモジュール、固有の幅や装飾的なスタイルは極力指定しない
@use "object/component/button";
@use "object/component/wrapper";

/*   Project   -----------------------------------------*/
// プロジェクト固有のUI(殆どのスタイルの追加はこのレイヤー)
@use "object/project/admin/admin";
@use "object/project/admin/user";
@use "object/project/user/index";
@use "object/project/shared";
@use "object/project/auth";
@use "object/project/form";
@use "object/project/management";




/*    Theme    -----------------------------------------*/

/*   Utility   -----------------------------------------*/
@use "object/utility/utility";